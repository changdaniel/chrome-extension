{"version":3,"sources":["logo.png","components/login.js","components/home.js","components/confirm-pay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","className","name","initialValues","remember","onFinish","values","onClick","console","log","Item","rules","required","message","prefix","UserOutlined","placeholder","LockOutlined","type","href","shape","htmlType","Home","ConfirmPay","progessScreen","Wrapper","class","header","body","footer","App","useState","screen","setScreen","src","logo","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,0SCwD5BC,MAnDf,SAAeC,GAQX,OACI,yBAAKC,UAAU,oBACf,kBAAC,IAAD,CACAC,KAAK,eACLD,UAAU,aACVE,cAAe,CAAEC,UAAU,GAC3BC,SAZa,SAAAC,GACbN,EAAMO,UACNC,QAAQC,IAAI,4BAA6BH,KAYzC,kBAAC,IAAKI,KAAN,CACER,KAAK,WACLS,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,CAAOC,OAAQ,kBAACC,EAAA,EAAD,CAAcd,UAAU,wBAA0Be,YAAY,cAG/E,kBAAC,IAAKN,KAAN,CACER,KAAK,WACLS,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,CACEC,OAAQ,kBAACG,EAAA,EAAD,CAAchB,UAAU,wBAChCiB,KAAK,WACLF,YAAY,cAIhB,kBAAC,IAAKN,KAAN,KACE,uBAAGT,UAAU,oBAAoBkB,KAAK,IAAtC,oBAKF,kBAAC,IAAKT,KAAN,KACE,kBAAC,IAAD,CAAQQ,KAAK,SAASE,MAAM,QAAQC,SAAS,SAASpB,UAAU,qBAAhE,c,OCvBKqB,MAnBf,WAEI,OAEI,yBAAKrB,UAAY,kBACb,wBAAIA,UAAY,aAAhB,mBAGA,wBAAIA,UAAY,aAAhB,yBAGA,wBAAIA,UAAY,aACZ,4C,OCGDsB,MAbf,SAAoBvB,GAEhB,OAEI,yBAAKC,UAAY,gBACb,6DACA,kBAAC,IAAD,CAAQmB,MAAM,QAAQF,KAAK,SAASX,QAASP,EAAMwB,eAAnD,OACA,kBAAC,IAAD,CAAQJ,MAAM,QAAQF,KAAK,UAA3B,QCFNO,EAAU,SAACzB,GAAD,OACd,yBAAK0B,MAAM,OACT,4BAAQzB,UAAU,cAAcD,EAAM2B,QACtC,0BAAM1B,UAAU,YAAYD,EAAM4B,MAClC,4BAAQ3B,UAAU,cAAcD,EAAM6B,UAuC3BC,EAlCH,WAAO,IAMbF,EACAC,EAPY,EAEYE,mBAAS,GAFrB,mBAETC,EAFS,KAEDC,EAFC,KAGVT,EAAgB,kBAAMS,EAAUD,EAAU,IAC1CL,EAAS,yBAAKO,IAAKC,IAAMlC,UAAU,aAmBzC,OAda,GAAV+B,GACDJ,EAAO,kBAAC,EAAD,CAAOrB,QAASiB,IACvBK,EAAS,wBAAIO,MAAM,SAAV,oCAEQ,GAAVJ,GACPJ,EAAO,6BAAK,kBAAC,EAAD,MAAO,kBAAC,EAAD,CAAYrB,QAASiB,KACxCK,EAAS,wBAAIO,MAAM,SAAV,oCAGQ,GAAVJ,IACPJ,EAAO,kBAAC,EAAD,MACPC,EAAS,wBAAIO,MAAM,SAAV,iCAIX,kBAAC,EAAD,CACET,OAAUA,EACVC,KAAQA,EACRC,OAAUA,KCnCMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMzC,c","file":"static/js/main.3925eb8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8a2ba4d1.png\";","import React from 'react';\nimport { Form, Input, Button} from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport 'antd/dist/antd.css';\n\nfunction Login(props) {\n\n    const onFinish = values => {\n        props.onClick()\n        console.log('Received values of form: ', values);\n      };\n\n\n    return(\n        <div className=\"signup-container\">\n        <Form\n        name=\"normal_login\"\n        className=\"login-form\"\n        initialValues={{ remember: true }}\n        onFinish={onFinish}>    \n\n        <Form.Item\n          name=\"username\"\n          rules={[{ required: true, message: 'Please input your Username!' }]}\n        >\n          <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: 'Please input your Password!' }]}\n        >\n          <Input\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n        </Form.Item>\n        \n        <Form.Item>\n          <a className=\"login-form-forgot\" href=\"\">\n            Forgot password\n          </a>\n        </Form.Item>\n  \n        <Form.Item>\n          <Button type=\"danger\" shape=\"round\" htmlType=\"submit\" className=\"login-form-button\">\n            Log in\n          </Button>\n        </Form.Item>\n      </Form>\n      </div>\n    )\n\n}\n\nexport default Login","import React from 'react';\nimport 'antd/dist/antd.css';\nimport './home.css'\n\nfunction Home() {\n\n    return(\n\n        <div className = \"home-container\">\n            <h3 className = \"home-text\">\n                Hi [first name]\n            </h3>\n            <h3 className = \"home-text\">\n                Your account balance:\n            </h3>\n            <h2 className = \"home-text\">\n                <strong>$1.00</strong>\n            </h2>\n        </div>\n    )\n\n}\n\nexport default Home","import React from 'react';\nimport {Button} from 'antd';\nimport { DollarCircleOutlined } from '@ant-design/icons'\nimport 'antd/dist/antd.css';\nimport './confirm-pay.css'\n\nfunction ConfirmPay(props) {\n\n    return(\n\n        <div className = \"confirm-span\">\n            <p> Access this article for $.25?</p>\n            <Button shape='round' type='danger' onClick={props.progessScreen}>Yes</Button>\n            <Button shape='round' type='danger'>No</Button>\n        </div>\n    )\n\n}\n\nexport default ConfirmPay","import React, {useState} from 'react';\nimport logo from './logo.png';\nimport './App.css';\n// import { Layout} from 'antd';\n\n// const { Header, Content, Footer } = Layout;\nimport Signup from './components/signup';\nimport Login from './components/login';\nimport Home from './components/home'; \nimport ConfirmPay from './components/confirm-pay';\n\nconst Wrapper = (props) => (\n  <div class=\"App\">\n    <header className=\"App-header\">{props.header}</header>\n    <body className=\"App-body\">{props.body}</body>\n    <footer className=\"App-footer\">{props.footer}</footer>\n  </div>\n  \n);\n\nconst App = () => {\n\n  const [screen, setScreen] = useState(0)\n  const progessScreen = () => setScreen(screen  + 1)\n  const header = <img src={logo} className=\"App-logo\"></img> \n\n  let body;\n  let footer;\n\n  if(screen == 0){\n    body = <Login onClick={progessScreen}/>\n    footer = <h3 color=\"white\">Something Here About Logging In</h3>\n  }\n  else if (screen == 1){\n    body = <div><Home/><ConfirmPay onClick={progessScreen}/></div>\n    footer = <h3 color=\"white\">Something Here about Confirming</h3>\n \n  }\n  else if (screen == 2) {\n    body = <Home/>\n    footer = <h3 color=\"white\">Something Here about Balance</h3>\n  }\n\n  return(\n  <Wrapper\n    header = {header}\n    body = {body}\n    footer = {footer}\n    />\n  )\n\n}\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}